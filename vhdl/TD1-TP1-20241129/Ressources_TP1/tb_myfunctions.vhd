--------------------------------------------------------------------------------
-- This VHDL file is generated by EASE/HDL from TRANSLOGIC BV,
-- the 'Graphical Systems Design Tool'.
--
-- Ease 5.1 Revision 12.
-- Design library : TD1_Exo1.
-- Host name      : HITACHI-RI8QD21.
-- User name      : bayle.
-- Time stamp     : Wed Mar 31 19:58:43 2004.
--
-- Designed by    : 
-- Company        : Translogic.
-- Design info    : 
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- Entity declaration of 'tb_myfunctions'.
-- Last modified : Wed Mar 31 19:53:49 2004.
--------------------------------------------------------------------------------


library ieee, TD1_Exo1 ;
use ieee.std_logic_1164.all ;
use TD1_Exo1.MyTools.all ;

entity tb_myfunctions is
end entity tb_myfunctions ;

--------------------------------------------------------------------------------
-- Architecture 'a0' of 'tb_myfunctions'
-- Last modified : Wed Mar 31 19:53:49 2004.
--------------------------------------------------------------------------------

architecture a0 of tb_myfunctions is

------Question1-------------------------------------------------------------------------

-- Déclaration vecteur de 8 bits organisé en "downto" et codé en "One-Hot"
signal Vec8_dwn : std_logic_vector(7 downto 0) := "00000001"; 

-- Déclaration d'index qui doivent récupèrer la position du '1' dans le vecteur de 8 bits organisé en "downto" et codé en "One-Hot"
signal IndexVec8_dwn_mux, IndexVec8_dwn_sreg : natural range 0 to 7; 

-- Déclaration vecteur de 8 bits organisé en "to" et codé en "One-Hot"
signal Vec8_up : std_logic_vector(0 to 7) := "00000001"; 

-- Déclaration d'un index qui doit récupèrer la position du '1' dans le vecteur de 8 bits organisé en "to" et codé en "One-Hot"
signal IndexVec8_up_mux,  IndexVec8_up_sreg: natural range 0 to 7; 

------Question2-------------------------------------------------------------------------
-- Taille vecteur de test
constant Vec_size : positive :=16; 

-- Déclaration vecteur de Vec_size bits organisé en "downto" et codé en "One-Hot"
signal Vec_dwn : std_logic_vector(Vec_size-1 downto 0) := (0 => '1', others => '0');

-- Déclaration d'index qui doivent récupèrer la position du '1' dans le vecteur de 8 bits organisé en "downto" et codé en "One-Hot"
signal IndexVec_dwn_mux, IndexVec_dwn_sreg : natural range Vec_dwn'reverse_range; 

-- Déclaration vecteur de Vec_size bits organisé en "to" et codé en "One-Hot"
signal Vec_up : std_logic_vector(0 to Vec_size-1) := ((Vec_size-1) => '1', others => '0');

-- Déclaration d'un index qui doit récupèrer la position du '1' dans le vecteur de 8 bits organisé en "to" et codé en "One-Hot"
signal IndexVec_up_mux,  IndexVec_up_sreg: natural range Vec_up'range; 


begin



  Functions_Call: process		-- EASE/HDL sens.list
  begin

    wait for 100 ns; -- attente pour visualisation chronogram

  	--Question1-------------------------------------------------------------------------

  	for i in 0 to 7 loop

  		Vec8_dwn <= Vec8_dwn(6 downto 0) & Vec8_dwn(7); -- rotation à gauche du vecteur

  		IndexVec8_dwn_mux <= POSin_8bits_MUX(Vec8_dwn);  -- appel fonction POSin_8bits_MUX

  		IndexVec8_dwn_sreg <= POSin_8bits_SReg(Vec8_dwn);  -- appel fonction POSin_8bits_SReg



  		Vec8_up <= Vec8_up(1 to 7) & Vec8_up(0) ; -- rotation à gauche du vecteur

  		IndexVec8_up_mux <= POSin_8bits_MUX(Vec8_up);  -- Pb la fonction ne marche pas correctement sur ce type

  		IndexVec8_up_sreg <= POSin_8bits_SReg(Vec8_up);-- Pb la fonction ne marche pas correctement sur ce type


  		wait for 100 ns; -- attente pour visualisation chronogram

    end loop;

  	--Question2-------------------------------------------------------------------------

  	for i in Vec_up'range loop

  		Vec_dwn <= Vec_dwn(Vec_dwn'high-1 downto Vec_dwn'low) & Vec_dwn(Vec_dwn'high); -- rotation à gauche du vecteur

  		IndexVec_dwn_mux <= POS_MUX(Vec_dwn);  -- appel fonction POSin_8bits_MUX

  		IndexVec_dwn_sreg <= POS_SReg(Vec_dwn);  -- appel fonction POSin_8bits_SReg



  		Vec_up <= Vec_up(Vec_up'low+1 to Vec_up'high) & Vec_up(Vec_up'low) ; -- rotation à gauche du vecteur

  		IndexVec_up_mux <= POS_MUX(Vec_up);  -- Pb la fonction ne marche pas correctement sur ce type

  		IndexVec_up_sreg <= POS_SReg(Vec_up);-- Pb la fonction ne marche pas correctement sur ce type

  		wait for 100 ns; -- attente pour visualisation chronogram

    end loop;


    wait; -- obligatoire car le process n'a pas de liste de sensibilité (sinon simu bloquée)

  end process Functions_Call ;
end architecture a0 ; -- of tb_myfunctions

